// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
	time "time"
)

type UsersAchievementsRequest struct {
	// When set to 'true', returns both completed and incomplete achievements for the user. When omitted or set to any other value, returns only completed achievements.
	IncludeIncomplete *string `json:"-" url:"includeIncomplete,omitempty"`
}

type UsersMetricEventSummaryRequest struct {
	// The time period over which to aggregate the event data.
	Aggregation UsersMetricEventSummaryRequestAggregation `json:"-" url:"aggregation"`
	// The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.
	StartDate string `json:"-" url:"startDate"`
	// The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.
	EndDate string `json:"-" url:"endDate"`
}

type UsersPointsRequest struct {
	// The number of recent point awards to return.
	Awards *int `json:"-" url:"awards,omitempty"`
}

type UsersPointsEventSummaryRequest struct {
	// The time period over which to aggregate the event data.
	Aggregation UsersPointsEventSummaryRequestAggregation `json:"-" url:"aggregation"`
	// The start date for the data range in YYYY-MM-DD format. The startDate must be before the endDate, and the date range must not exceed 400 days.
	StartDate string `json:"-" url:"startDate"`
	// The end date for the data range in YYYY-MM-DD format. The endDate must be after the startDate, and the date range must not exceed 400 days.
	EndDate string `json:"-" url:"endDate"`
}

type UsersStreakRequest struct {
	// The number of past streak periods to include in the streakHistory field of the  response.
	HistoryPeriods *int `json:"-" url:"historyPeriods,omitempty"`
}

type MetricResponse struct {
	// The unique ID of the metric.
	Id string `json:"id" url:"id"`
	// The unique key of the metric.
	Key string `json:"key" url:"key"`
	// The name of the metric.
	Name string `json:"name" url:"name"`
	// The status of the metric.
	Status MetricStatus `json:"status" url:"status"`
	// The user's current total for the metric.
	Current float64 `json:"current" url:"current"`
	// A list of the metric's achievements and the user's progress towards each.
	Achievements []*CompletedAchievementResponse `json:"achievements,omitempty" url:"achievements,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetricResponse) GetId() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MetricResponse) GetKey() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *MetricResponse) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MetricResponse) GetStatus() MetricStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MetricResponse) GetCurrent() float64 {
	if m == nil {
		return 0
	}
	return m.Current
}

func (m *MetricResponse) GetAchievements() []*CompletedAchievementResponse {
	if m == nil {
		return nil
	}
	return m.Achievements
}

func (m *MetricResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The status of the achievement.
type MetricStatus string

const (
	MetricStatusArchived MetricStatus = "archived"
	MetricStatusActive   MetricStatus = "active"
)

func NewMetricStatusFromString(s string) (MetricStatus, error) {
	switch s {
	case "archived":
		return MetricStatusArchived, nil
	case "active":
		return MetricStatusActive, nil
	}
	var t MetricStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetricStatus) Ptr() *MetricStatus {
	return &m
}

// An object representing the user's streak.
type StreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`
	// The date the streak started.
	Started *string `json:"started,omitempty" url:"started,omitempty"`
	// The start date of the current streak period.
	PeriodStart *string `json:"periodStart,omitempty" url:"periodStart,omitempty"`
	// The end date of the current streak period.
	PeriodEnd *string `json:"periodEnd,omitempty" url:"periodEnd,omitempty"`
	// The date the streak will expire if the user does not increment a metric.
	Expires *string `json:"expires,omitempty" url:"expires,omitempty"`
	// A list of the user's past streak periods up through the current period. Each period includes the start and end dates and the length of the streak.
	StreakHistory []*StreakResponseStreakHistoryItem `json:"streakHistory,omitempty" url:"streakHistory,omitempty"`
	// The user's rank across all users. Null if the user has no active streak.
	Rank *int `json:"rank,omitempty" url:"rank,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StreakResponse) GetLength() int {
	if s == nil {
		return 0
	}
	return s.Length
}

func (s *StreakResponse) GetFrequency() StreakFrequency {
	if s == nil {
		return ""
	}
	return s.Frequency
}

func (s *StreakResponse) GetStarted() *string {
	if s == nil {
		return nil
	}
	return s.Started
}

func (s *StreakResponse) GetPeriodStart() *string {
	if s == nil {
		return nil
	}
	return s.PeriodStart
}

func (s *StreakResponse) GetPeriodEnd() *string {
	if s == nil {
		return nil
	}
	return s.PeriodEnd
}

func (s *StreakResponse) GetExpires() *string {
	if s == nil {
		return nil
	}
	return s.Expires
}

func (s *StreakResponse) GetStreakHistory() []*StreakResponseStreakHistoryItem {
	if s == nil {
		return nil
	}
	return s.StreakHistory
}

func (s *StreakResponse) GetRank() *int {
	if s == nil {
		return nil
	}
	return s.Rank
}

func (s *StreakResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreakResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// An object representing a past streak period.
type StreakResponseStreakHistoryItem struct {
	// The date this streak period started.
	PeriodStart string `json:"periodStart" url:"periodStart"`
	// The date this streak period ended.
	PeriodEnd string `json:"periodEnd" url:"periodEnd"`
	// The length of the user's streak during this period.
	Length int `json:"length" url:"length"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StreakResponseStreakHistoryItem) GetPeriodStart() string {
	if s == nil {
		return ""
	}
	return s.PeriodStart
}

func (s *StreakResponseStreakHistoryItem) GetPeriodEnd() string {
	if s == nil {
		return ""
	}
	return s.PeriodEnd
}

func (s *StreakResponseStreakHistoryItem) GetLength() int {
	if s == nil {
		return 0
	}
	return s.Length
}

func (s *StreakResponseStreakHistoryItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreakResponseStreakHistoryItem) UnmarshalJSON(data []byte) error {
	type unmarshaler StreakResponseStreakHistoryItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreakResponseStreakHistoryItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreakResponseStreakHistoryItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A user of your application.
type User struct {
	// The user's email address. Required if subscribeToEmails is true.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The name to refer to the user by in emails.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The user's timezone (used for email scheduling).
	Tz *string `json:"tz,omitempty" url:"tz,omitempty"`
	// The user's device tokens, used for push notifications.
	DeviceTokens []string `json:"deviceTokens,omitempty" url:"deviceTokens,omitempty"`
	// Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.
	SubscribeToEmails *bool `json:"subscribeToEmails,omitempty" url:"subscribeToEmails,omitempty"`
	// User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.
	Attributes map[string]string `json:"attributes,omitempty" url:"attributes,omitempty"`
	// The ID of the user in your database. Must be a string.
	Id string `json:"id" url:"id"`
	// Whether the user is in the control group, meaning they do not receive emails or other communications from Trophy.
	Control *bool `json:"control,omitempty" url:"control,omitempty"`
	// The date and time the user was created, in ISO 8601 format.
	Created *time.Time `json:"created,omitempty" url:"created,omitempty"`
	// The date and time the user was last updated, in ISO 8601 format.
	Updated *time.Time `json:"updated,omitempty" url:"updated,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *User) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *User) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *User) GetTz() *string {
	if u == nil {
		return nil
	}
	return u.Tz
}

func (u *User) GetDeviceTokens() []string {
	if u == nil {
		return nil
	}
	return u.DeviceTokens
}

func (u *User) GetSubscribeToEmails() *bool {
	if u == nil {
		return nil
	}
	return u.SubscribeToEmails
}

func (u *User) GetAttributes() map[string]string {
	if u == nil {
		return nil
	}
	return u.Attributes
}

func (u *User) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *User) GetControl() *bool {
	if u == nil {
		return nil
	}
	return u.Control
}

func (u *User) GetCreated() *time.Time {
	if u == nil {
		return nil
	}
	return u.Created
}

func (u *User) GetUpdated() *time.Time {
	if u == nil {
		return nil
	}
	return u.Updated
}

func (u *User) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *User) UnmarshalJSON(data []byte) error {
	type embed User
	var unmarshaler = struct {
		embed
		Created *internal.DateTime `json:"created,omitempty"`
		Updated *internal.DateTime `json:"updated,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = User(unmarshaler.embed)
	u.Created = unmarshaler.Created.TimePtr()
	u.Updated = unmarshaler.Updated.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) MarshalJSON() ([]byte, error) {
	type embed User
	var marshaler = struct {
		embed
		Created *internal.DateTime `json:"created,omitempty"`
		Updated *internal.DateTime `json:"updated,omitempty"`
	}{
		embed:   embed(*u),
		Created: internal.NewOptionalDateTime(u.Created),
		Updated: internal.NewOptionalDateTime(u.Updated),
	}
	return json.Marshal(marshaler)
}

func (u *User) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersMetricEventSummaryRequestAggregation string

const (
	UsersMetricEventSummaryRequestAggregationDaily   UsersMetricEventSummaryRequestAggregation = "daily"
	UsersMetricEventSummaryRequestAggregationWeekly  UsersMetricEventSummaryRequestAggregation = "weekly"
	UsersMetricEventSummaryRequestAggregationMonthly UsersMetricEventSummaryRequestAggregation = "monthly"
)

func NewUsersMetricEventSummaryRequestAggregationFromString(s string) (UsersMetricEventSummaryRequestAggregation, error) {
	switch s {
	case "daily":
		return UsersMetricEventSummaryRequestAggregationDaily, nil
	case "weekly":
		return UsersMetricEventSummaryRequestAggregationWeekly, nil
	case "monthly":
		return UsersMetricEventSummaryRequestAggregationMonthly, nil
	}
	var t UsersMetricEventSummaryRequestAggregation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersMetricEventSummaryRequestAggregation) Ptr() *UsersMetricEventSummaryRequestAggregation {
	return &u
}

type UsersMetricEventSummaryResponseItem struct {
	// The date of the data point. For weekly or monthly aggregations, this is the first date of the period.
	Date string `json:"date" url:"date"`
	// The user's total for this metric at the end of this date.
	Total float64 `json:"total" url:"total"`
	// The change in the user's total for this metric during this period.
	Change float64 `json:"change" url:"change"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UsersMetricEventSummaryResponseItem) GetDate() string {
	if u == nil {
		return ""
	}
	return u.Date
}

func (u *UsersMetricEventSummaryResponseItem) GetTotal() float64 {
	if u == nil {
		return 0
	}
	return u.Total
}

func (u *UsersMetricEventSummaryResponseItem) GetChange() float64 {
	if u == nil {
		return 0
	}
	return u.Change
}

func (u *UsersMetricEventSummaryResponseItem) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UsersMetricEventSummaryResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersMetricEventSummaryResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersMetricEventSummaryResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersMetricEventSummaryResponseItem) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersPointsEventSummaryRequestAggregation string

const (
	UsersPointsEventSummaryRequestAggregationDaily   UsersPointsEventSummaryRequestAggregation = "daily"
	UsersPointsEventSummaryRequestAggregationWeekly  UsersPointsEventSummaryRequestAggregation = "weekly"
	UsersPointsEventSummaryRequestAggregationMonthly UsersPointsEventSummaryRequestAggregation = "monthly"
)

func NewUsersPointsEventSummaryRequestAggregationFromString(s string) (UsersPointsEventSummaryRequestAggregation, error) {
	switch s {
	case "daily":
		return UsersPointsEventSummaryRequestAggregationDaily, nil
	case "weekly":
		return UsersPointsEventSummaryRequestAggregationWeekly, nil
	case "monthly":
		return UsersPointsEventSummaryRequestAggregationMonthly, nil
	}
	var t UsersPointsEventSummaryRequestAggregation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersPointsEventSummaryRequestAggregation) Ptr() *UsersPointsEventSummaryRequestAggregation {
	return &u
}

type UsersPointsEventSummaryResponseItem struct {
	// The date of the data point. For weekly or monthly aggregations, this is the first date of the period.
	Date string `json:"date" url:"date"`
	// The user's total points at the end of this date.
	Total float64 `json:"total" url:"total"`
	// The change in the user's total points during this period.
	Change float64 `json:"change" url:"change"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UsersPointsEventSummaryResponseItem) GetDate() string {
	if u == nil {
		return ""
	}
	return u.Date
}

func (u *UsersPointsEventSummaryResponseItem) GetTotal() float64 {
	if u == nil {
		return 0
	}
	return u.Total
}

func (u *UsersPointsEventSummaryResponseItem) GetChange() float64 {
	if u == nil {
		return 0
	}
	return u.Change
}

func (u *UsersPointsEventSummaryResponseItem) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UsersPointsEventSummaryResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersPointsEventSummaryResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersPointsEventSummaryResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersPointsEventSummaryResponseItem) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
