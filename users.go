// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "go-mod-path/generated/go/internal"
)

type MetricResponse struct {
	// The unique ID of the metric.
	Id string `json:"id" url:"id"`
	// The unique key of the metric.
	Key string `json:"key" url:"key"`
	// The name of the metric.
	Name string `json:"name" url:"name"`
	// The emoji to represent the metric.
	Emoji string `json:"emoji" url:"emoji"`
	// The frequency of the streak.
	StreakFrequency StreakFrequency `json:"streakFrequency" url:"streakFrequency"`
	// The status of the metric.
	Status MetricStatus `json:"status" url:"status"`
	// The user's current total for the metric.
	Current float64 `json:"current" url:"current"`
	// A list of the metric's achievements and the user's progress towards each.
	Achievements []*AchievementResponse `json:"achievements,omitempty" url:"achievements,omitempty"`
	// The user's current streak for the metric, if the metric has streaks enabled.
	Streak *StreakResponse `json:"streak,omitempty" url:"streak,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetricResponse) GetId() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MetricResponse) GetKey() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *MetricResponse) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MetricResponse) GetEmoji() string {
	if m == nil {
		return ""
	}
	return m.Emoji
}

func (m *MetricResponse) GetStreakFrequency() StreakFrequency {
	if m == nil {
		return ""
	}
	return m.StreakFrequency
}

func (m *MetricResponse) GetStatus() MetricStatus {
	if m == nil {
		return ""
	}
	return m.Status
}

func (m *MetricResponse) GetCurrent() float64 {
	if m == nil {
		return 0
	}
	return m.Current
}

func (m *MetricResponse) GetAchievements() []*AchievementResponse {
	if m == nil {
		return nil
	}
	return m.Achievements
}

func (m *MetricResponse) GetStreak() *StreakResponse {
	if m == nil {
		return nil
	}
	return m.Streak
}

func (m *MetricResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The status of the achievement.
type MetricStatus string

const (
	MetricStatusArchived MetricStatus = "archived"
	MetricStatusActive   MetricStatus = "active"
)

func NewMetricStatusFromString(s string) (MetricStatus, error) {
	switch s {
	case "archived":
		return MetricStatusArchived, nil
	case "active":
		return MetricStatusActive, nil
	}
	var t MetricStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetricStatus) Ptr() *MetricStatus {
	return &m
}

type StreakFrequency string

const (
	StreakFrequencyDaily   StreakFrequency = "daily"
	StreakFrequencyWeekly  StreakFrequency = "weekly"
	StreakFrequencyMonthly StreakFrequency = "monthly"
	StreakFrequencyYearly  StreakFrequency = "yearly"
)

func NewStreakFrequencyFromString(s string) (StreakFrequency, error) {
	switch s {
	case "daily":
		return StreakFrequencyDaily, nil
	case "weekly":
		return StreakFrequencyWeekly, nil
	case "monthly":
		return StreakFrequencyMonthly, nil
	case "yearly":
		return StreakFrequencyYearly, nil
	}
	var t StreakFrequency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StreakFrequency) Ptr() *StreakFrequency {
	return &s
}

type StreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StreakResponse) GetLength() int {
	if s == nil {
		return 0
	}
	return s.Length
}

func (s *StreakResponse) GetFrequency() StreakFrequency {
	if s == nil {
		return ""
	}
	return s.Frequency
}

func (s *StreakResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler StreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreakResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
