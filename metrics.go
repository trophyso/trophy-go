// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
)

type MetricsEventRequest struct {
	// The idempotency key for the event.
	IdempotencyKey *string `json:"-" url:"-"`
	// The user that triggered the event.
	User *UpsertedUser `json:"user,omitempty" url:"-"`
	// The value to add to the user's current total for the given metric.
	Value float64 `json:"value" url:"-"`
	// Event attributes as key-value pairs. Keys must match existing event attributes set up in the Trophy dashboard.
	Attributes map[string]string `json:"attributes,omitempty" url:"-"`
}

type EventResponse struct {
	// The unique ID of the event.
	EventId string `json:"eventId" url:"eventId"`
	// The unique ID of the metric that was updated.
	MetricId string `json:"metricId" url:"metricId"`
	// The user's new total progress against the metric.
	Total float64 `json:"total" url:"total"`
	// Achievements completed as a result of this event.
	Achievements []*CompletedAchievementResponse `json:"achievements,omitempty" url:"achievements,omitempty"`
	// The user's current streak for the metric, if the metric has streaks enabled.
	CurrentStreak *MetricEventStreakResponse `json:"currentStreak,omitempty" url:"currentStreak,omitempty"`
	// A map of points systems by key that were affected by this event.
	Points map[string]*MetricEventPointsResponse `json:"points,omitempty" url:"points,omitempty"`
	// The idempotency key used for the event, if one was provided.
	IdempotencyKey *string `json:"idempotencyKey,omitempty" url:"idempotencyKey,omitempty"`
	// Whether the event was replayed due to idempotency.
	IdempotentReplayed *bool `json:"idempotentReplayed,omitempty" url:"idempotentReplayed,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventResponse) GetEventId() string {
	if e == nil {
		return ""
	}
	return e.EventId
}

func (e *EventResponse) GetMetricId() string {
	if e == nil {
		return ""
	}
	return e.MetricId
}

func (e *EventResponse) GetTotal() float64 {
	if e == nil {
		return 0
	}
	return e.Total
}

func (e *EventResponse) GetAchievements() []*CompletedAchievementResponse {
	if e == nil {
		return nil
	}
	return e.Achievements
}

func (e *EventResponse) GetCurrentStreak() *MetricEventStreakResponse {
	if e == nil {
		return nil
	}
	return e.CurrentStreak
}

func (e *EventResponse) GetPoints() map[string]*MetricEventPointsResponse {
	if e == nil {
		return nil
	}
	return e.Points
}

func (e *EventResponse) GetIdempotencyKey() *string {
	if e == nil {
		return nil
	}
	return e.IdempotencyKey
}

func (e *EventResponse) GetIdempotentReplayed() *bool {
	if e == nil {
		return nil
	}
	return e.IdempotentReplayed
}

func (e *EventResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}
