// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
)

type MetricsEventRequest struct {
	// The user that triggered the event.
	User *UpsertedUser `json:"user,omitempty" url:"-"`
	// The value to add to the user's current total for the given metric.
	Value float64 `json:"value" url:"-"`
}

type EventResponse struct {
	// The unique ID of the event.
	EventId string `json:"eventId" url:"eventId"`
	// The unique ID of the metric that was updated.
	MetricId string `json:"metricId" url:"metricId"`
	// The user's new total progress against the metric.
	Total float64 `json:"total" url:"total"`
	// Changes to achievements as a result of this event.
	Achievements []*EventResponseMetricsItem `json:"achievements,omitempty" url:"achievements,omitempty"`
	// The user's current streak for the metric, if the metric has streaks enabled.
	CurrentStreak *IncrementMetricStreakResponse `json:"currentStreak,omitempty" url:"currentStreak,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventResponse) GetEventId() string {
	if e == nil {
		return ""
	}
	return e.EventId
}

func (e *EventResponse) GetMetricId() string {
	if e == nil {
		return ""
	}
	return e.MetricId
}

func (e *EventResponse) GetTotal() float64 {
	if e == nil {
		return 0
	}
	return e.Total
}

func (e *EventResponse) GetAchievements() []*EventResponseMetricsItem {
	if e == nil {
		return nil
	}
	return e.Achievements
}

func (e *EventResponse) GetCurrentStreak() *IncrementMetricStreakResponse {
	if e == nil {
		return nil
	}
	return e.CurrentStreak
}

func (e *EventResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventResponseMetricsItem struct {
	// The trigger of the achievement, in this case either 'metric' or 'streak'.
	Trigger *string `json:"trigger,omitempty" url:"trigger,omitempty"`
	// The ID of the metric that these achievements are associated with, if any.
	MetricId *string `json:"metricId,omitempty" url:"metricId,omitempty"`
	// A list of any new achievements that the user has now completed as a result of this event being submitted.
	Completed []*EventResponseMetricsItemCompletedItem `json:"completed,omitempty" url:"completed,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EventResponseMetricsItem) GetTrigger() *string {
	if e == nil {
		return nil
	}
	return e.Trigger
}

func (e *EventResponseMetricsItem) GetMetricId() *string {
	if e == nil {
		return nil
	}
	return e.MetricId
}

func (e *EventResponseMetricsItem) GetCompleted() []*EventResponseMetricsItemCompletedItem {
	if e == nil {
		return nil
	}
	return e.Completed
}

func (e *EventResponseMetricsItem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventResponseMetricsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EventResponseMetricsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventResponseMetricsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventResponseMetricsItem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventResponseMetricsItemCompletedItem struct {
	MetricAchievementResponse *MetricAchievementResponse
	StreakAchievementResponse *StreakAchievementResponse

	typ string
}

func NewEventResponseMetricsItemCompletedItemFromMetricAchievementResponse(value *MetricAchievementResponse) *EventResponseMetricsItemCompletedItem {
	return &EventResponseMetricsItemCompletedItem{typ: "MetricAchievementResponse", MetricAchievementResponse: value}
}

func NewEventResponseMetricsItemCompletedItemFromStreakAchievementResponse(value *StreakAchievementResponse) *EventResponseMetricsItemCompletedItem {
	return &EventResponseMetricsItemCompletedItem{typ: "StreakAchievementResponse", StreakAchievementResponse: value}
}

func (e *EventResponseMetricsItemCompletedItem) GetMetricAchievementResponse() *MetricAchievementResponse {
	if e == nil {
		return nil
	}
	return e.MetricAchievementResponse
}

func (e *EventResponseMetricsItemCompletedItem) GetStreakAchievementResponse() *StreakAchievementResponse {
	if e == nil {
		return nil
	}
	return e.StreakAchievementResponse
}

func (e *EventResponseMetricsItemCompletedItem) UnmarshalJSON(data []byte) error {
	valueMetricAchievementResponse := new(MetricAchievementResponse)
	if err := json.Unmarshal(data, &valueMetricAchievementResponse); err == nil {
		e.typ = "MetricAchievementResponse"
		e.MetricAchievementResponse = valueMetricAchievementResponse
		return nil
	}
	valueStreakAchievementResponse := new(StreakAchievementResponse)
	if err := json.Unmarshal(data, &valueStreakAchievementResponse); err == nil {
		e.typ = "StreakAchievementResponse"
		e.StreakAchievementResponse = valueStreakAchievementResponse
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventResponseMetricsItemCompletedItem) MarshalJSON() ([]byte, error) {
	if e.typ == "MetricAchievementResponse" || e.MetricAchievementResponse != nil {
		return json.Marshal(e.MetricAchievementResponse)
	}
	if e.typ == "StreakAchievementResponse" || e.StreakAchievementResponse != nil {
		return json.Marshal(e.StreakAchievementResponse)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventResponseMetricsItemCompletedItemVisitor interface {
	VisitMetricAchievementResponse(*MetricAchievementResponse) error
	VisitStreakAchievementResponse(*StreakAchievementResponse) error
}

func (e *EventResponseMetricsItemCompletedItem) Accept(visitor EventResponseMetricsItemCompletedItemVisitor) error {
	if e.typ == "MetricAchievementResponse" || e.MetricAchievementResponse != nil {
		return visitor.VisitMetricAchievementResponse(e.MetricAchievementResponse)
	}
	if e.typ == "StreakAchievementResponse" || e.StreakAchievementResponse != nil {
		return visitor.VisitStreakAchievementResponse(e.StreakAchievementResponse)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

// An object representing the user's streak after incrementing a metric.
type IncrementMetricStreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`
	// The date the streak started.
	Started *string `json:"started,omitempty" url:"started,omitempty"`
	// The start date of the current streak period.
	PeriodStart *string `json:"periodStart,omitempty" url:"periodStart,omitempty"`
	// The end date of the current streak period.
	PeriodEnd *string `json:"periodEnd,omitempty" url:"periodEnd,omitempty"`
	// The date the streak will expire if the user does not increment a metric.
	Expires *string `json:"expires,omitempty" url:"expires,omitempty"`
	// Whether this metric event increased the user's streak length.
	Extended *bool `json:"extended,omitempty" url:"extended,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (i *IncrementMetricStreakResponse) GetLength() int {
	if i == nil {
		return 0
	}
	return i.Length
}

func (i *IncrementMetricStreakResponse) GetFrequency() StreakFrequency {
	if i == nil {
		return ""
	}
	return i.Frequency
}

func (i *IncrementMetricStreakResponse) GetStarted() *string {
	if i == nil {
		return nil
	}
	return i.Started
}

func (i *IncrementMetricStreakResponse) GetPeriodStart() *string {
	if i == nil {
		return nil
	}
	return i.PeriodStart
}

func (i *IncrementMetricStreakResponse) GetPeriodEnd() *string {
	if i == nil {
		return nil
	}
	return i.PeriodEnd
}

func (i *IncrementMetricStreakResponse) GetExpires() *string {
	if i == nil {
		return nil
	}
	return i.Expires
}

func (i *IncrementMetricStreakResponse) GetExtended() *bool {
	if i == nil {
		return nil
	}
	return i.Extended
}

func (i *IncrementMetricStreakResponse) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IncrementMetricStreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler IncrementMetricStreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IncrementMetricStreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties
	i.rawJSON = json.RawMessage(data)
	return nil
}

func (i *IncrementMetricStreakResponse) String() string {
	if len(i.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(i.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}
