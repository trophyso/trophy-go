// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
	time "time"
)

type AchievementResponse struct {
	// The unique ID of the achievement.
	Id string `json:"id" url:"id"`
	// The name of this achievement.
	Name string `json:"name" url:"name"`
	// The trigger of the achievement.
	Trigger AchievementResponseTrigger `json:"trigger" url:"trigger"`
	// The description of this achievement.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The URL of the badge image for the achievement, if one has been uploaded.
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The key used to reference this achievement in the API (only applicable if trigger = 'api')
	Key *string `json:"key,omitempty" url:"key,omitempty"`
	// The length of the streak required to complete the achievement (only applicable if trigger = 'streak')
	StreakLength *int `json:"streakLength,omitempty" url:"streakLength,omitempty"`
	// The ID of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricId *string `json:"metricId,omitempty" url:"metricId,omitempty"`
	// The value of the metric required to complete the achievement (only applicable if trigger = 'metric')
	MetricValue *float64 `json:"metricValue,omitempty" url:"metricValue,omitempty"`
	// The name of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// The user's current streak for the metric, if the metric has streaks enabled.
	CurrentStreak *MetricEventStreakResponse `json:"currentStreak,omitempty" url:"currentStreak,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchievementResponse) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AchievementResponse) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AchievementResponse) GetTrigger() AchievementResponseTrigger {
	if a == nil {
		return ""
	}
	return a.Trigger
}

func (a *AchievementResponse) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AchievementResponse) GetBadgeUrl() *string {
	if a == nil {
		return nil
	}
	return a.BadgeUrl
}

func (a *AchievementResponse) GetKey() *string {
	if a == nil {
		return nil
	}
	return a.Key
}

func (a *AchievementResponse) GetStreakLength() *int {
	if a == nil {
		return nil
	}
	return a.StreakLength
}

func (a *AchievementResponse) GetMetricId() *string {
	if a == nil {
		return nil
	}
	return a.MetricId
}

func (a *AchievementResponse) GetMetricValue() *float64 {
	if a == nil {
		return nil
	}
	return a.MetricValue
}

func (a *AchievementResponse) GetMetricName() *string {
	if a == nil {
		return nil
	}
	return a.MetricName
}

func (a *AchievementResponse) GetCurrentStreak() *MetricEventStreakResponse {
	if a == nil {
		return nil
	}
	return a.CurrentStreak
}

func (a *AchievementResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchievementResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AchievementResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchievementResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchievementResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The trigger of the achievement.
type AchievementResponseTrigger string

const (
	AchievementResponseTriggerMetric AchievementResponseTrigger = "metric"
	AchievementResponseTriggerStreak AchievementResponseTrigger = "streak"
	AchievementResponseTriggerApi    AchievementResponseTrigger = "api"
)

func NewAchievementResponseTriggerFromString(s string) (AchievementResponseTrigger, error) {
	switch s {
	case "metric":
		return AchievementResponseTriggerMetric, nil
	case "streak":
		return AchievementResponseTriggerStreak, nil
	case "api":
		return AchievementResponseTriggerApi, nil
	}
	var t AchievementResponseTrigger
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AchievementResponseTrigger) Ptr() *AchievementResponseTrigger {
	return &a
}

type BaseStreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`
	// The date the streak started.
	Started *string `json:"started,omitempty" url:"started,omitempty"`
	// The start date of the current streak period.
	PeriodStart *string `json:"periodStart,omitempty" url:"periodStart,omitempty"`
	// The end date of the current streak period.
	PeriodEnd *string `json:"periodEnd,omitempty" url:"periodEnd,omitempty"`
	// The date the streak will expire if the user does not increment a metric.
	Expires *string `json:"expires,omitempty" url:"expires,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseStreakResponse) GetLength() int {
	if b == nil {
		return 0
	}
	return b.Length
}

func (b *BaseStreakResponse) GetFrequency() StreakFrequency {
	if b == nil {
		return ""
	}
	return b.Frequency
}

func (b *BaseStreakResponse) GetStarted() *string {
	if b == nil {
		return nil
	}
	return b.Started
}

func (b *BaseStreakResponse) GetPeriodStart() *string {
	if b == nil {
		return nil
	}
	return b.PeriodStart
}

func (b *BaseStreakResponse) GetPeriodEnd() *string {
	if b == nil {
		return nil
	}
	return b.PeriodEnd
}

func (b *BaseStreakResponse) GetExpires() *string {
	if b == nil {
		return nil
	}
	return b.Expires
}

func (b *BaseStreakResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseStreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseStreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseStreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseStreakResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CompletedAchievementResponse struct {
	// The unique ID of the achievement.
	Id string `json:"id" url:"id"`
	// The name of this achievement.
	Name string `json:"name" url:"name"`
	// The trigger of the achievement.
	Trigger AchievementResponseTrigger `json:"trigger" url:"trigger"`
	// The description of this achievement.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The URL of the badge image for the achievement, if one has been uploaded.
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The key used to reference this achievement in the API (only applicable if trigger = 'api')
	Key *string `json:"key,omitempty" url:"key,omitempty"`
	// The length of the streak required to complete the achievement (only applicable if trigger = 'streak')
	StreakLength *int `json:"streakLength,omitempty" url:"streakLength,omitempty"`
	// The ID of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricId *string `json:"metricId,omitempty" url:"metricId,omitempty"`
	// The value of the metric required to complete the achievement (only applicable if trigger = 'metric')
	MetricValue *float64 `json:"metricValue,omitempty" url:"metricValue,omitempty"`
	// The name of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// The user's current streak for the metric, if the metric has streaks enabled.
	CurrentStreak *MetricEventStreakResponse `json:"currentStreak,omitempty" url:"currentStreak,omitempty"`
	// The date and time the achievement was completed, in ISO 8601 format.
	AchievedAt *time.Time `json:"achievedAt,omitempty" url:"achievedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompletedAchievementResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CompletedAchievementResponse) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CompletedAchievementResponse) GetTrigger() AchievementResponseTrigger {
	if c == nil {
		return ""
	}
	return c.Trigger
}

func (c *CompletedAchievementResponse) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CompletedAchievementResponse) GetBadgeUrl() *string {
	if c == nil {
		return nil
	}
	return c.BadgeUrl
}

func (c *CompletedAchievementResponse) GetKey() *string {
	if c == nil {
		return nil
	}
	return c.Key
}

func (c *CompletedAchievementResponse) GetStreakLength() *int {
	if c == nil {
		return nil
	}
	return c.StreakLength
}

func (c *CompletedAchievementResponse) GetMetricId() *string {
	if c == nil {
		return nil
	}
	return c.MetricId
}

func (c *CompletedAchievementResponse) GetMetricValue() *float64 {
	if c == nil {
		return nil
	}
	return c.MetricValue
}

func (c *CompletedAchievementResponse) GetMetricName() *string {
	if c == nil {
		return nil
	}
	return c.MetricName
}

func (c *CompletedAchievementResponse) GetCurrentStreak() *MetricEventStreakResponse {
	if c == nil {
		return nil
	}
	return c.CurrentStreak
}

func (c *CompletedAchievementResponse) GetAchievedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.AchievedAt
}

func (c *CompletedAchievementResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompletedAchievementResponse) UnmarshalJSON(data []byte) error {
	type embed CompletedAchievementResponse
	var unmarshaler = struct {
		embed
		AchievedAt *internal.DateTime `json:"achievedAt,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompletedAchievementResponse(unmarshaler.embed)
	c.AchievedAt = unmarshaler.AchievedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompletedAchievementResponse) MarshalJSON() ([]byte, error) {
	type embed CompletedAchievementResponse
	var marshaler = struct {
		embed
		AchievedAt *internal.DateTime `json:"achievedAt,omitempty"`
	}{
		embed:      embed(*c),
		AchievedAt: internal.NewOptionalDateTime(c.AchievedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompletedAchievementResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ErrorBody struct {
	Error string `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorBody) GetError() string {
	if e == nil {
		return ""
	}
	return e.Error
}

func (e *ErrorBody) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorBody) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type GetUserPointsResponse struct {
	// The user's total points
	Total *float64 `json:"total,omitempty" url:"total,omitempty"`
	// Array of trigger awards that added points.
	Awards []*PointsAward `json:"awards,omitempty" url:"awards,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUserPointsResponse) GetTotal() *float64 {
	if g == nil {
		return nil
	}
	return g.Total
}

func (g *GetUserPointsResponse) GetAwards() []*PointsAward {
	if g == nil {
		return nil
	}
	return g.Awards
}

func (g *GetUserPointsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserPointsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserPointsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserPointsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserPointsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// An object representing the user's streak after sending a metric event.
type MetricEventStreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`
	// The date the streak started.
	Started *string `json:"started,omitempty" url:"started,omitempty"`
	// The start date of the current streak period.
	PeriodStart *string `json:"periodStart,omitempty" url:"periodStart,omitempty"`
	// The end date of the current streak period.
	PeriodEnd *string `json:"periodEnd,omitempty" url:"periodEnd,omitempty"`
	// The date the streak will expire if the user does not increment a metric.
	Expires *string `json:"expires,omitempty" url:"expires,omitempty"`
	// Whether this metric event increased the user's streak length.
	Extended *bool `json:"extended,omitempty" url:"extended,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetricEventStreakResponse) GetLength() int {
	if m == nil {
		return 0
	}
	return m.Length
}

func (m *MetricEventStreakResponse) GetFrequency() StreakFrequency {
	if m == nil {
		return ""
	}
	return m.Frequency
}

func (m *MetricEventStreakResponse) GetStarted() *string {
	if m == nil {
		return nil
	}
	return m.Started
}

func (m *MetricEventStreakResponse) GetPeriodStart() *string {
	if m == nil {
		return nil
	}
	return m.PeriodStart
}

func (m *MetricEventStreakResponse) GetPeriodEnd() *string {
	if m == nil {
		return nil
	}
	return m.PeriodEnd
}

func (m *MetricEventStreakResponse) GetExpires() *string {
	if m == nil {
		return nil
	}
	return m.Expires
}

func (m *MetricEventStreakResponse) GetExtended() *bool {
	if m == nil {
		return nil
	}
	return m.Extended
}

func (m *MetricEventStreakResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricEventStreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricEventStreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricEventStreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricEventStreakResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PointsAward struct {
	// The ID of the trigger award
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The points awarded by this trigger
	Awarded *float64 `json:"awarded,omitempty" url:"awarded,omitempty"`
	// The date these points were awarded, in ISO 8601 format.
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// The user's total points after this award occurred.
	Total   *float64       `json:"total,omitempty" url:"total,omitempty"`
	Trigger *PointsTrigger `json:"trigger,omitempty" url:"trigger,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PointsAward) GetId() *string {
	if p == nil {
		return nil
	}
	return p.Id
}

func (p *PointsAward) GetAwarded() *float64 {
	if p == nil {
		return nil
	}
	return p.Awarded
}

func (p *PointsAward) GetDate() *string {
	if p == nil {
		return nil
	}
	return p.Date
}

func (p *PointsAward) GetTotal() *float64 {
	if p == nil {
		return nil
	}
	return p.Total
}

func (p *PointsAward) GetTrigger() *PointsTrigger {
	if p == nil {
		return nil
	}
	return p.Trigger
}

func (p *PointsAward) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PointsAward) UnmarshalJSON(data []byte) error {
	type unmarshaler PointsAward
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PointsAward(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PointsAward) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PointsTrigger struct {
	// The ID of the trigger
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The type of trigger
	Type *PointsTriggerType `json:"type,omitempty" url:"type,omitempty"`
	// The points awarded by this trigger.
	Points *float64 `json:"points,omitempty" url:"points,omitempty"`
	// If the trigger has type 'metric', the name of the metric
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// If the trigger has type 'metric', the threshold of the metric that triggers the points
	MetricThreshold *float64 `json:"metricThreshold,omitempty" url:"metricThreshold,omitempty"`
	// If the trigger has type 'streak', the threshold of the streak that triggers the points
	StreakLengthThreshold *float64 `json:"streakLengthThreshold,omitempty" url:"streakLengthThreshold,omitempty"`
	// If the trigger has type 'achievement', the name of the achievement
	AchievementName *string `json:"achievementName,omitempty" url:"achievementName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PointsTrigger) GetId() *string {
	if p == nil {
		return nil
	}
	return p.Id
}

func (p *PointsTrigger) GetType() *PointsTriggerType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PointsTrigger) GetPoints() *float64 {
	if p == nil {
		return nil
	}
	return p.Points
}

func (p *PointsTrigger) GetMetricName() *string {
	if p == nil {
		return nil
	}
	return p.MetricName
}

func (p *PointsTrigger) GetMetricThreshold() *float64 {
	if p == nil {
		return nil
	}
	return p.MetricThreshold
}

func (p *PointsTrigger) GetStreakLengthThreshold() *float64 {
	if p == nil {
		return nil
	}
	return p.StreakLengthThreshold
}

func (p *PointsTrigger) GetAchievementName() *string {
	if p == nil {
		return nil
	}
	return p.AchievementName
}

func (p *PointsTrigger) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PointsTrigger) UnmarshalJSON(data []byte) error {
	type unmarshaler PointsTrigger
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PointsTrigger(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PointsTrigger) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The type of trigger
type PointsTriggerType string

const (
	PointsTriggerTypeMetric      PointsTriggerType = "metric"
	PointsTriggerTypeAchievement PointsTriggerType = "achievement"
	PointsTriggerTypeStreak      PointsTriggerType = "streak"
)

func NewPointsTriggerTypeFromString(s string) (PointsTriggerType, error) {
	switch s {
	case "metric":
		return PointsTriggerTypeMetric, nil
	case "achievement":
		return PointsTriggerTypeAchievement, nil
	case "streak":
		return PointsTriggerTypeStreak, nil
	}
	var t PointsTriggerType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PointsTriggerType) Ptr() *PointsTriggerType {
	return &p
}

type StreakFrequency string

const (
	StreakFrequencyDaily   StreakFrequency = "daily"
	StreakFrequencyWeekly  StreakFrequency = "weekly"
	StreakFrequencyMonthly StreakFrequency = "monthly"
	StreakFrequencyYearly  StreakFrequency = "yearly"
)

func NewStreakFrequencyFromString(s string) (StreakFrequency, error) {
	switch s {
	case "daily":
		return StreakFrequencyDaily, nil
	case "weekly":
		return StreakFrequencyWeekly, nil
	case "monthly":
		return StreakFrequencyMonthly, nil
	case "yearly":
		return StreakFrequencyYearly, nil
	}
	var t StreakFrequency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StreakFrequency) Ptr() *StreakFrequency {
	return &s
}

// An object with editable user fields.
type UpdatedUser struct {
	// The user's email address. Required if subscribeToEmails is true.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The name to refer to the user by in emails.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The user's timezone (used for email scheduling).
	Tz *string `json:"tz,omitempty" url:"tz,omitempty"`
	// The user's device tokens, used for push notifications.
	DeviceTokens []string `json:"deviceTokens,omitempty" url:"deviceTokens,omitempty"`
	// Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.
	SubscribeToEmails *bool `json:"subscribeToEmails,omitempty" url:"subscribeToEmails,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatedUser) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpdatedUser) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpdatedUser) GetTz() *string {
	if u == nil {
		return nil
	}
	return u.Tz
}

func (u *UpdatedUser) GetDeviceTokens() []string {
	if u == nil {
		return nil
	}
	return u.DeviceTokens
}

func (u *UpdatedUser) GetSubscribeToEmails() *bool {
	if u == nil {
		return nil
	}
	return u.SubscribeToEmails
}

func (u *UpdatedUser) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatedUser) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// An object with editable user fields.
type UpsertedUser struct {
	// The user's email address. Required if subscribeToEmails is true.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The name to refer to the user by in emails.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The user's timezone (used for email scheduling).
	Tz *string `json:"tz,omitempty" url:"tz,omitempty"`
	// The user's device tokens, used for push notifications.
	DeviceTokens []string `json:"deviceTokens,omitempty" url:"deviceTokens,omitempty"`
	// Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.
	SubscribeToEmails *bool `json:"subscribeToEmails,omitempty" url:"subscribeToEmails,omitempty"`
	// The ID of the user in your database. Must be a string.
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertedUser) GetEmail() *string {
	if u == nil {
		return nil
	}
	return u.Email
}

func (u *UpsertedUser) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpsertedUser) GetTz() *string {
	if u == nil {
		return nil
	}
	return u.Tz
}

func (u *UpsertedUser) GetDeviceTokens() []string {
	if u == nil {
		return nil
	}
	return u.DeviceTokens
}

func (u *UpsertedUser) GetSubscribeToEmails() *bool {
	if u == nil {
		return nil
	}
	return u.SubscribeToEmails
}

func (u *UpsertedUser) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UpsertedUser) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertedUser) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
