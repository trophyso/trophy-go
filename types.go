// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
	time "time"
)

type AchievementResponse struct {
	// The unique ID of the achievement.
	Id string `json:"id" url:"id"`
	// The name of this achievement.
	Name string `json:"name" url:"name"`
	// The trigger of the achievement.
	Trigger AchievementResponseTrigger `json:"trigger" url:"trigger"`
	// The description of this achievement.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The URL of the badge image for the achievement, if one has been uploaded.
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The key used to reference this achievement in the API (only applicable if trigger = 'api')
	Key string `json:"key" url:"key"`
	// The length of the streak required to complete the achievement (only applicable if trigger = 'streak')
	StreakLength *int `json:"streakLength,omitempty" url:"streakLength,omitempty"`
	// The ID of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricId *string `json:"metricId,omitempty" url:"metricId,omitempty"`
	// The value of the metric required to complete the achievement (only applicable if trigger = 'metric')
	MetricValue *float64 `json:"metricValue,omitempty" url:"metricValue,omitempty"`
	// The name of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchievementResponse) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AchievementResponse) GetName() string {
	if a == nil {
		return ""
	}
	return a.Name
}

func (a *AchievementResponse) GetTrigger() AchievementResponseTrigger {
	if a == nil {
		return ""
	}
	return a.Trigger
}

func (a *AchievementResponse) GetDescription() *string {
	if a == nil {
		return nil
	}
	return a.Description
}

func (a *AchievementResponse) GetBadgeUrl() *string {
	if a == nil {
		return nil
	}
	return a.BadgeUrl
}

func (a *AchievementResponse) GetKey() string {
	if a == nil {
		return ""
	}
	return a.Key
}

func (a *AchievementResponse) GetStreakLength() *int {
	if a == nil {
		return nil
	}
	return a.StreakLength
}

func (a *AchievementResponse) GetMetricId() *string {
	if a == nil {
		return nil
	}
	return a.MetricId
}

func (a *AchievementResponse) GetMetricValue() *float64 {
	if a == nil {
		return nil
	}
	return a.MetricValue
}

func (a *AchievementResponse) GetMetricName() *string {
	if a == nil {
		return nil
	}
	return a.MetricName
}

func (a *AchievementResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchievementResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AchievementResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchievementResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchievementResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The trigger of the achievement.
type AchievementResponseTrigger string

const (
	AchievementResponseTriggerMetric AchievementResponseTrigger = "metric"
	AchievementResponseTriggerStreak AchievementResponseTrigger = "streak"
	AchievementResponseTriggerApi    AchievementResponseTrigger = "api"
)

func NewAchievementResponseTriggerFromString(s string) (AchievementResponseTrigger, error) {
	switch s {
	case "metric":
		return AchievementResponseTriggerMetric, nil
	case "streak":
		return AchievementResponseTriggerStreak, nil
	case "api":
		return AchievementResponseTriggerApi, nil
	}
	var t AchievementResponseTrigger
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AchievementResponseTrigger) Ptr() *AchievementResponseTrigger {
	return &a
}

type BaseStreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`
	// The date the streak started.
	Started *string `json:"started,omitempty" url:"started,omitempty"`
	// The start date of the current streak period.
	PeriodStart *string `json:"periodStart,omitempty" url:"periodStart,omitempty"`
	// The end date of the current streak period.
	PeriodEnd *string `json:"periodEnd,omitempty" url:"periodEnd,omitempty"`
	// The date the streak will expire if the user does not increment a metric.
	Expires *string `json:"expires,omitempty" url:"expires,omitempty"`
	// The number of available streak freezes. Only present if the organization has enabled streak freezes.
	Freezes *int `json:"freezes,omitempty" url:"freezes,omitempty"`
	// The maximum number of streak freezes a user can have. Only present if the organization has enabled streak freezes.
	MaxFreezes *int `json:"maxFreezes,omitempty" url:"maxFreezes,omitempty"`
	// The interval at which the user will earn streak freezes, in days. Only present if the organization has enabled streak freeze auto-earn.
	FreezeAutoEarnInterval *int `json:"freezeAutoEarnInterval,omitempty" url:"freezeAutoEarnInterval,omitempty"`
	// The amount of streak freezes the user will earn per interval. Only present if the organization has enabled streak freeze auto-earn.
	FreezeAutoEarnAmount *int `json:"freezeAutoEarnAmount,omitempty" url:"freezeAutoEarnAmount,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BaseStreakResponse) GetLength() int {
	if b == nil {
		return 0
	}
	return b.Length
}

func (b *BaseStreakResponse) GetFrequency() StreakFrequency {
	if b == nil {
		return ""
	}
	return b.Frequency
}

func (b *BaseStreakResponse) GetStarted() *string {
	if b == nil {
		return nil
	}
	return b.Started
}

func (b *BaseStreakResponse) GetPeriodStart() *string {
	if b == nil {
		return nil
	}
	return b.PeriodStart
}

func (b *BaseStreakResponse) GetPeriodEnd() *string {
	if b == nil {
		return nil
	}
	return b.PeriodEnd
}

func (b *BaseStreakResponse) GetExpires() *string {
	if b == nil {
		return nil
	}
	return b.Expires
}

func (b *BaseStreakResponse) GetFreezes() *int {
	if b == nil {
		return nil
	}
	return b.Freezes
}

func (b *BaseStreakResponse) GetMaxFreezes() *int {
	if b == nil {
		return nil
	}
	return b.MaxFreezes
}

func (b *BaseStreakResponse) GetFreezeAutoEarnInterval() *int {
	if b == nil {
		return nil
	}
	return b.FreezeAutoEarnInterval
}

func (b *BaseStreakResponse) GetFreezeAutoEarnAmount() *int {
	if b == nil {
		return nil
	}
	return b.FreezeAutoEarnAmount
}

func (b *BaseStreakResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BaseStreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BaseStreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BaseStreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BaseStreakResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// An issue encountered while bulk inserting data.
type BulkInsertIssue struct {
	// The ID of the user the issue relates to.
	UserId string `json:"userId" url:"userId"`
	// The severity level of the issue.
	Level BulkInsertIssueLevel `json:"level" url:"level"`
	// A human-readable description of the issue.
	Reason string `json:"reason" url:"reason"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkInsertIssue) GetUserId() string {
	if b == nil {
		return ""
	}
	return b.UserId
}

func (b *BulkInsertIssue) GetLevel() BulkInsertIssueLevel {
	if b == nil {
		return ""
	}
	return b.Level
}

func (b *BulkInsertIssue) GetReason() string {
	if b == nil {
		return ""
	}
	return b.Reason
}

func (b *BulkInsertIssue) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkInsertIssue) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkInsertIssue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkInsertIssue(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkInsertIssue) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The severity level of the issue.
type BulkInsertIssueLevel string

const (
	BulkInsertIssueLevelError   BulkInsertIssueLevel = "error"
	BulkInsertIssueLevelWarning BulkInsertIssueLevel = "warning"
)

func NewBulkInsertIssueLevelFromString(s string) (BulkInsertIssueLevel, error) {
	switch s {
	case "error":
		return BulkInsertIssueLevelError, nil
	case "warning":
		return BulkInsertIssueLevelWarning, nil
	}
	var t BulkInsertIssueLevel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BulkInsertIssueLevel) Ptr() *BulkInsertIssueLevel {
	return &b
}

type CompletedAchievementResponse struct {
	// The unique ID of the achievement.
	Id string `json:"id" url:"id"`
	// The name of this achievement.
	Name string `json:"name" url:"name"`
	// The trigger of the achievement.
	Trigger AchievementResponseTrigger `json:"trigger" url:"trigger"`
	// The description of this achievement.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The URL of the badge image for the achievement, if one has been uploaded.
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The key used to reference this achievement in the API (only applicable if trigger = 'api')
	Key string `json:"key" url:"key"`
	// The length of the streak required to complete the achievement (only applicable if trigger = 'streak')
	StreakLength *int `json:"streakLength,omitempty" url:"streakLength,omitempty"`
	// The ID of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricId *string `json:"metricId,omitempty" url:"metricId,omitempty"`
	// The value of the metric required to complete the achievement (only applicable if trigger = 'metric')
	MetricValue *float64 `json:"metricValue,omitempty" url:"metricValue,omitempty"`
	// The name of the metric associated with this achievement (only applicable if trigger = 'metric')
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// The date and time the achievement was completed, in ISO 8601 format.
	AchievedAt time.Time `json:"achievedAt" url:"achievedAt"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompletedAchievementResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CompletedAchievementResponse) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CompletedAchievementResponse) GetTrigger() AchievementResponseTrigger {
	if c == nil {
		return ""
	}
	return c.Trigger
}

func (c *CompletedAchievementResponse) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CompletedAchievementResponse) GetBadgeUrl() *string {
	if c == nil {
		return nil
	}
	return c.BadgeUrl
}

func (c *CompletedAchievementResponse) GetKey() string {
	if c == nil {
		return ""
	}
	return c.Key
}

func (c *CompletedAchievementResponse) GetStreakLength() *int {
	if c == nil {
		return nil
	}
	return c.StreakLength
}

func (c *CompletedAchievementResponse) GetMetricId() *string {
	if c == nil {
		return nil
	}
	return c.MetricId
}

func (c *CompletedAchievementResponse) GetMetricValue() *float64 {
	if c == nil {
		return nil
	}
	return c.MetricValue
}

func (c *CompletedAchievementResponse) GetMetricName() *string {
	if c == nil {
		return nil
	}
	return c.MetricName
}

func (c *CompletedAchievementResponse) GetAchievedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.AchievedAt
}

func (c *CompletedAchievementResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompletedAchievementResponse) UnmarshalJSON(data []byte) error {
	type embed CompletedAchievementResponse
	var unmarshaler = struct {
		embed
		AchievedAt *internal.DateTime `json:"achievedAt"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompletedAchievementResponse(unmarshaler.embed)
	c.AchievedAt = unmarshaler.AchievedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompletedAchievementResponse) MarshalJSON() ([]byte, error) {
	type embed CompletedAchievementResponse
	var marshaler = struct {
		embed
		AchievedAt *internal.DateTime `json:"achievedAt"`
	}{
		embed:      embed(*c),
		AchievedAt: internal.NewDateTime(c.AchievedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompletedAchievementResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Response containing any issues encountered while creating streak freezes.
type CreateStreakFreezesResponse struct {
	// Array of issues encountered during freeze creation.
	Issues []*BulkInsertIssue `json:"issues,omitempty" url:"issues,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateStreakFreezesResponse) GetIssues() []*BulkInsertIssue {
	if c == nil {
		return nil
	}
	return c.Issues
}

func (c *CreateStreakFreezesResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateStreakFreezesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateStreakFreezesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateStreakFreezesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateStreakFreezesResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ErrorBody struct {
	Error string `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorBody) GetError() string {
	if e == nil {
		return ""
	}
	return e.Error
}

func (e *ErrorBody) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorBody) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type GetUserPointsResponse struct {
	// The ID of the points system
	Id string `json:"id" url:"id"`
	// The key of the points system
	Key string `json:"key" url:"key"`
	// The name of the points system
	Name string `json:"name" url:"name"`
	// The description of the points system
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The URL of the badge image for the points system
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The maximum number of points a user can be awarded in this points system
	MaxPoints *float64 `json:"maxPoints,omitempty" url:"maxPoints,omitempty"`
	// The user's total points
	Total int `json:"total" url:"total"`
	// Array of trigger awards that added points.
	Awards []*PointsAward `json:"awards,omitempty" url:"awards,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUserPointsResponse) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetUserPointsResponse) GetKey() string {
	if g == nil {
		return ""
	}
	return g.Key
}

func (g *GetUserPointsResponse) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetUserPointsResponse) GetDescription() *string {
	if g == nil {
		return nil
	}
	return g.Description
}

func (g *GetUserPointsResponse) GetBadgeUrl() *string {
	if g == nil {
		return nil
	}
	return g.BadgeUrl
}

func (g *GetUserPointsResponse) GetMaxPoints() *float64 {
	if g == nil {
		return nil
	}
	return g.MaxPoints
}

func (g *GetUserPointsResponse) GetTotal() int {
	if g == nil {
		return 0
	}
	return g.Total
}

func (g *GetUserPointsResponse) GetAwards() []*PointsAward {
	if g == nil {
		return nil
	}
	return g.Awards
}

func (g *GetUserPointsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserPointsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserPointsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserPointsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserPointsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A leaderboard with its configuration details.
type LeaderboardResponse struct {
	// The unique ID of the leaderboard.
	Id string `json:"id" url:"id"`
	// The user-facing name of the leaderboard.
	Name string `json:"name" url:"name"`
	// The unique key used to reference the leaderboard in APIs.
	Key string `json:"key" url:"key"`
	// What the leaderboard ranks by.
	RankBy LeaderboardResponseRankBy `json:"rankBy" url:"rankBy"`
	// The key of the attribute to break down this leaderboard by.
	BreakdownAttribute *string `json:"breakdownAttribute,omitempty" url:"breakdownAttribute,omitempty"`
	// The key of the metric to rank by, if rankBy is 'metric'.
	MetricKey *string `json:"metricKey,omitempty" url:"metricKey,omitempty"`
	// The name of the metric to rank by, if rankBy is 'metric'.
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// The key of the points system to rank by, if rankBy is 'points'.
	PointsSystemKey *string `json:"pointsSystemKey,omitempty" url:"pointsSystemKey,omitempty"`
	// The name of the points system to rank by, if rankBy is 'points'.
	PointsSystemName *string `json:"pointsSystemName,omitempty" url:"pointsSystemName,omitempty"`
	// The user-facing description of the leaderboard.
	Description string `json:"description" url:"description"`
	// The start date of the leaderboard in YYYY-MM-DD format.
	Start string `json:"start" url:"start"`
	// The end date of the leaderboard in YYYY-MM-DD format, or null if it runs forever.
	End *string `json:"end,omitempty" url:"end,omitempty"`
	// The maximum number of participants in the leaderboard.
	MaxParticipants int `json:"maxParticipants" url:"maxParticipants"`
	// The repetition type for recurring leaderboards, or null for one-time leaderboards.
	RunUnit *LeaderboardResponseRunUnit `json:"runUnit,omitempty" url:"runUnit,omitempty"`
	// The interval between repetitions, relative to the start date and repetition type.
	RunInterval int `json:"runInterval" url:"runInterval"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LeaderboardResponse) GetId() string {
	if l == nil {
		return ""
	}
	return l.Id
}

func (l *LeaderboardResponse) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *LeaderboardResponse) GetKey() string {
	if l == nil {
		return ""
	}
	return l.Key
}

func (l *LeaderboardResponse) GetRankBy() LeaderboardResponseRankBy {
	if l == nil {
		return ""
	}
	return l.RankBy
}

func (l *LeaderboardResponse) GetBreakdownAttribute() *string {
	if l == nil {
		return nil
	}
	return l.BreakdownAttribute
}

func (l *LeaderboardResponse) GetMetricKey() *string {
	if l == nil {
		return nil
	}
	return l.MetricKey
}

func (l *LeaderboardResponse) GetMetricName() *string {
	if l == nil {
		return nil
	}
	return l.MetricName
}

func (l *LeaderboardResponse) GetPointsSystemKey() *string {
	if l == nil {
		return nil
	}
	return l.PointsSystemKey
}

func (l *LeaderboardResponse) GetPointsSystemName() *string {
	if l == nil {
		return nil
	}
	return l.PointsSystemName
}

func (l *LeaderboardResponse) GetDescription() string {
	if l == nil {
		return ""
	}
	return l.Description
}

func (l *LeaderboardResponse) GetStart() string {
	if l == nil {
		return ""
	}
	return l.Start
}

func (l *LeaderboardResponse) GetEnd() *string {
	if l == nil {
		return nil
	}
	return l.End
}

func (l *LeaderboardResponse) GetMaxParticipants() int {
	if l == nil {
		return 0
	}
	return l.MaxParticipants
}

func (l *LeaderboardResponse) GetRunUnit() *LeaderboardResponseRunUnit {
	if l == nil {
		return nil
	}
	return l.RunUnit
}

func (l *LeaderboardResponse) GetRunInterval() int {
	if l == nil {
		return 0
	}
	return l.RunInterval
}

func (l *LeaderboardResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LeaderboardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LeaderboardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LeaderboardResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LeaderboardResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// What the leaderboard ranks by.
type LeaderboardResponseRankBy string

const (
	LeaderboardResponseRankByPoints LeaderboardResponseRankBy = "points"
	LeaderboardResponseRankByStreak LeaderboardResponseRankBy = "streak"
	LeaderboardResponseRankByMetric LeaderboardResponseRankBy = "metric"
)

func NewLeaderboardResponseRankByFromString(s string) (LeaderboardResponseRankBy, error) {
	switch s {
	case "points":
		return LeaderboardResponseRankByPoints, nil
	case "streak":
		return LeaderboardResponseRankByStreak, nil
	case "metric":
		return LeaderboardResponseRankByMetric, nil
	}
	var t LeaderboardResponseRankBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LeaderboardResponseRankBy) Ptr() *LeaderboardResponseRankBy {
	return &l
}

// The repetition type for recurring leaderboards, or null for one-time leaderboards.
type LeaderboardResponseRunUnit string

const (
	LeaderboardResponseRunUnitDay   LeaderboardResponseRunUnit = "day"
	LeaderboardResponseRunUnitMonth LeaderboardResponseRunUnit = "month"
	LeaderboardResponseRunUnitYear  LeaderboardResponseRunUnit = "year"
)

func NewLeaderboardResponseRunUnitFromString(s string) (LeaderboardResponseRunUnit, error) {
	switch s {
	case "day":
		return LeaderboardResponseRunUnitDay, nil
	case "month":
		return LeaderboardResponseRunUnitMonth, nil
	case "year":
		return LeaderboardResponseRunUnitYear, nil
	}
	var t LeaderboardResponseRunUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LeaderboardResponseRunUnit) Ptr() *LeaderboardResponseRunUnit {
	return &l
}

type MetricEventPointsResponse struct {
	// The ID of the points system
	Id string `json:"id" url:"id"`
	// The key of the points system
	Key string `json:"key" url:"key"`
	// The name of the points system
	Name string `json:"name" url:"name"`
	// The description of the points system
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The URL of the badge image for the points system
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The maximum number of points a user can be awarded in this points system
	MaxPoints *float64 `json:"maxPoints,omitempty" url:"maxPoints,omitempty"`
	// The user's total points
	Total int `json:"total" url:"total"`
	// Array of trigger awards that added points.
	Awards []*PointsAward `json:"awards,omitempty" url:"awards,omitempty"`
	// The points added by this event.
	Added int `json:"added" url:"added"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetricEventPointsResponse) GetId() string {
	if m == nil {
		return ""
	}
	return m.Id
}

func (m *MetricEventPointsResponse) GetKey() string {
	if m == nil {
		return ""
	}
	return m.Key
}

func (m *MetricEventPointsResponse) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *MetricEventPointsResponse) GetDescription() *string {
	if m == nil {
		return nil
	}
	return m.Description
}

func (m *MetricEventPointsResponse) GetBadgeUrl() *string {
	if m == nil {
		return nil
	}
	return m.BadgeUrl
}

func (m *MetricEventPointsResponse) GetMaxPoints() *float64 {
	if m == nil {
		return nil
	}
	return m.MaxPoints
}

func (m *MetricEventPointsResponse) GetTotal() int {
	if m == nil {
		return 0
	}
	return m.Total
}

func (m *MetricEventPointsResponse) GetAwards() []*PointsAward {
	if m == nil {
		return nil
	}
	return m.Awards
}

func (m *MetricEventPointsResponse) GetAdded() int {
	if m == nil {
		return 0
	}
	return m.Added
}

func (m *MetricEventPointsResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricEventPointsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricEventPointsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricEventPointsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricEventPointsResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// An object representing the user's streak after sending a metric event.
type MetricEventStreakResponse struct {
	// The length of the user's current streak.
	Length int `json:"length" url:"length"`
	// The frequency of the streak.
	Frequency StreakFrequency `json:"frequency" url:"frequency"`
	// The date the streak started.
	Started *string `json:"started,omitempty" url:"started,omitempty"`
	// The start date of the current streak period.
	PeriodStart *string `json:"periodStart,omitempty" url:"periodStart,omitempty"`
	// The end date of the current streak period.
	PeriodEnd *string `json:"periodEnd,omitempty" url:"periodEnd,omitempty"`
	// The date the streak will expire if the user does not increment a metric.
	Expires *string `json:"expires,omitempty" url:"expires,omitempty"`
	// The number of available streak freezes. Only present if the organization has enabled streak freezes.
	Freezes *int `json:"freezes,omitempty" url:"freezes,omitempty"`
	// The maximum number of streak freezes a user can have. Only present if the organization has enabled streak freezes.
	MaxFreezes *int `json:"maxFreezes,omitempty" url:"maxFreezes,omitempty"`
	// The interval at which the user will earn streak freezes, in days. Only present if the organization has enabled streak freeze auto-earn.
	FreezeAutoEarnInterval *int `json:"freezeAutoEarnInterval,omitempty" url:"freezeAutoEarnInterval,omitempty"`
	// The amount of streak freezes the user will earn per interval. Only present if the organization has enabled streak freeze auto-earn.
	FreezeAutoEarnAmount *int `json:"freezeAutoEarnAmount,omitempty" url:"freezeAutoEarnAmount,omitempty"`
	// Whether this metric event increased the user's streak length.
	Extended bool `json:"extended" url:"extended"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MetricEventStreakResponse) GetLength() int {
	if m == nil {
		return 0
	}
	return m.Length
}

func (m *MetricEventStreakResponse) GetFrequency() StreakFrequency {
	if m == nil {
		return ""
	}
	return m.Frequency
}

func (m *MetricEventStreakResponse) GetStarted() *string {
	if m == nil {
		return nil
	}
	return m.Started
}

func (m *MetricEventStreakResponse) GetPeriodStart() *string {
	if m == nil {
		return nil
	}
	return m.PeriodStart
}

func (m *MetricEventStreakResponse) GetPeriodEnd() *string {
	if m == nil {
		return nil
	}
	return m.PeriodEnd
}

func (m *MetricEventStreakResponse) GetExpires() *string {
	if m == nil {
		return nil
	}
	return m.Expires
}

func (m *MetricEventStreakResponse) GetFreezes() *int {
	if m == nil {
		return nil
	}
	return m.Freezes
}

func (m *MetricEventStreakResponse) GetMaxFreezes() *int {
	if m == nil {
		return nil
	}
	return m.MaxFreezes
}

func (m *MetricEventStreakResponse) GetFreezeAutoEarnInterval() *int {
	if m == nil {
		return nil
	}
	return m.FreezeAutoEarnInterval
}

func (m *MetricEventStreakResponse) GetFreezeAutoEarnAmount() *int {
	if m == nil {
		return nil
	}
	return m.FreezeAutoEarnAmount
}

func (m *MetricEventStreakResponse) GetExtended() bool {
	if m == nil {
		return false
	}
	return m.Extended
}

func (m *MetricEventStreakResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricEventStreakResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MetricEventStreakResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetricEventStreakResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricEventStreakResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PointsAward struct {
	// The ID of the trigger award
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The points awarded by this trigger
	Awarded *int `json:"awarded,omitempty" url:"awarded,omitempty"`
	// The date these points were awarded, in ISO 8601 format.
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// The user's total points after this award occurred.
	Total   *int           `json:"total,omitempty" url:"total,omitempty"`
	Trigger *PointsTrigger `json:"trigger,omitempty" url:"trigger,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PointsAward) GetId() *string {
	if p == nil {
		return nil
	}
	return p.Id
}

func (p *PointsAward) GetAwarded() *int {
	if p == nil {
		return nil
	}
	return p.Awarded
}

func (p *PointsAward) GetDate() *string {
	if p == nil {
		return nil
	}
	return p.Date
}

func (p *PointsAward) GetTotal() *int {
	if p == nil {
		return nil
	}
	return p.Total
}

func (p *PointsAward) GetTrigger() *PointsTrigger {
	if p == nil {
		return nil
	}
	return p.Trigger
}

func (p *PointsAward) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PointsAward) UnmarshalJSON(data []byte) error {
	type unmarshaler PointsAward
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PointsAward(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PointsAward) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PointsTrigger struct {
	// The ID of the trigger
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The type of trigger
	Type *PointsTriggerType `json:"type,omitempty" url:"type,omitempty"`
	// The points awarded by this trigger.
	Points *int `json:"points,omitempty" url:"points,omitempty"`
	// If the trigger has type 'metric', the name of the metric
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// If the trigger has type 'metric', the threshold of the metric that triggers the points
	MetricThreshold *int `json:"metricThreshold,omitempty" url:"metricThreshold,omitempty"`
	// If the trigger has type 'streak', the threshold of the streak that triggers the points
	StreakLengthThreshold *int `json:"streakLengthThreshold,omitempty" url:"streakLengthThreshold,omitempty"`
	// If the trigger has type 'achievement', the name of the achievement
	AchievementName *string `json:"achievementName,omitempty" url:"achievementName,omitempty"`
	// If the trigger has type 'time', the unit of time after which to award points
	TimeUnit *PointsTriggerTimeUnit `json:"timeUnit,omitempty" url:"timeUnit,omitempty"`
	// If the trigger has type 'time', the numer of units of timeUnit after which to award points
	TimeInterval *int `json:"timeInterval,omitempty" url:"timeInterval,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PointsTrigger) GetId() *string {
	if p == nil {
		return nil
	}
	return p.Id
}

func (p *PointsTrigger) GetType() *PointsTriggerType {
	if p == nil {
		return nil
	}
	return p.Type
}

func (p *PointsTrigger) GetPoints() *int {
	if p == nil {
		return nil
	}
	return p.Points
}

func (p *PointsTrigger) GetMetricName() *string {
	if p == nil {
		return nil
	}
	return p.MetricName
}

func (p *PointsTrigger) GetMetricThreshold() *int {
	if p == nil {
		return nil
	}
	return p.MetricThreshold
}

func (p *PointsTrigger) GetStreakLengthThreshold() *int {
	if p == nil {
		return nil
	}
	return p.StreakLengthThreshold
}

func (p *PointsTrigger) GetAchievementName() *string {
	if p == nil {
		return nil
	}
	return p.AchievementName
}

func (p *PointsTrigger) GetTimeUnit() *PointsTriggerTimeUnit {
	if p == nil {
		return nil
	}
	return p.TimeUnit
}

func (p *PointsTrigger) GetTimeInterval() *int {
	if p == nil {
		return nil
	}
	return p.TimeInterval
}

func (p *PointsTrigger) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PointsTrigger) UnmarshalJSON(data []byte) error {
	type unmarshaler PointsTrigger
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PointsTrigger(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PointsTrigger) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// If the trigger has type 'time', the unit of time after which to award points
type PointsTriggerTimeUnit string

const (
	PointsTriggerTimeUnitHour PointsTriggerTimeUnit = "hour"
	PointsTriggerTimeUnitDay  PointsTriggerTimeUnit = "day"
)

func NewPointsTriggerTimeUnitFromString(s string) (PointsTriggerTimeUnit, error) {
	switch s {
	case "hour":
		return PointsTriggerTimeUnitHour, nil
	case "day":
		return PointsTriggerTimeUnitDay, nil
	}
	var t PointsTriggerTimeUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PointsTriggerTimeUnit) Ptr() *PointsTriggerTimeUnit {
	return &p
}

// The type of trigger
type PointsTriggerType string

const (
	PointsTriggerTypeMetric       PointsTriggerType = "metric"
	PointsTriggerTypeAchievement  PointsTriggerType = "achievement"
	PointsTriggerTypeStreak       PointsTriggerType = "streak"
	PointsTriggerTypeTime         PointsTriggerType = "time"
	PointsTriggerTypeUserCreation PointsTriggerType = "user_creation"
)

func NewPointsTriggerTypeFromString(s string) (PointsTriggerType, error) {
	switch s {
	case "metric":
		return PointsTriggerTypeMetric, nil
	case "achievement":
		return PointsTriggerTypeAchievement, nil
	case "streak":
		return PointsTriggerTypeStreak, nil
	case "time":
		return PointsTriggerTypeTime, nil
	case "user_creation":
		return PointsTriggerTypeUserCreation, nil
	}
	var t PointsTriggerType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PointsTriggerType) Ptr() *PointsTriggerType {
	return &p
}

type StreakFrequency string

const (
	StreakFrequencyDaily   StreakFrequency = "daily"
	StreakFrequencyWeekly  StreakFrequency = "weekly"
	StreakFrequencyMonthly StreakFrequency = "monthly"
	StreakFrequencyYearly  StreakFrequency = "yearly"
)

func NewStreakFrequencyFromString(s string) (StreakFrequency, error) {
	switch s {
	case "daily":
		return StreakFrequencyDaily, nil
	case "weekly":
		return StreakFrequencyWeekly, nil
	case "monthly":
		return StreakFrequencyMonthly, nil
	case "yearly":
		return StreakFrequencyYearly, nil
	}
	var t StreakFrequency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StreakFrequency) Ptr() *StreakFrequency {
	return &s
}

// An object with editable user fields.
type UpdatedUser struct {
	// The user's email address. Required if subscribeToEmails is true.
	Email string `json:"email" url:"email"`
	// The name to refer to the user by in emails.
	Name string `json:"name" url:"name"`
	// The user's timezone (used for email scheduling).
	Tz *string `json:"tz,omitempty" url:"tz,omitempty"`
	// The user's device tokens, used for push notifications.
	DeviceTokens []string `json:"deviceTokens,omitempty" url:"deviceTokens,omitempty"`
	// Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.
	SubscribeToEmails bool `json:"subscribeToEmails" url:"subscribeToEmails"`
	// User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.
	Attributes map[string]string `json:"attributes,omitempty" url:"attributes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatedUser) GetEmail() string {
	if u == nil {
		return ""
	}
	return u.Email
}

func (u *UpdatedUser) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpdatedUser) GetTz() *string {
	if u == nil {
		return nil
	}
	return u.Tz
}

func (u *UpdatedUser) GetDeviceTokens() []string {
	if u == nil {
		return nil
	}
	return u.DeviceTokens
}

func (u *UpdatedUser) GetSubscribeToEmails() bool {
	if u == nil {
		return false
	}
	return u.SubscribeToEmails
}

func (u *UpdatedUser) GetAttributes() map[string]string {
	if u == nil {
		return nil
	}
	return u.Attributes
}

func (u *UpdatedUser) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatedUser) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// An object with editable user fields.
type UpsertedUser struct {
	// The user's email address. Required if subscribeToEmails is true.
	Email string `json:"email" url:"email"`
	// The name to refer to the user by in emails.
	Name string `json:"name" url:"name"`
	// The user's timezone (used for email scheduling).
	Tz *string `json:"tz,omitempty" url:"tz,omitempty"`
	// The user's device tokens, used for push notifications.
	DeviceTokens []string `json:"deviceTokens,omitempty" url:"deviceTokens,omitempty"`
	// Whether the user should receive Trophy-powered emails. If false, Trophy will not store the user's email address.
	SubscribeToEmails bool `json:"subscribeToEmails" url:"subscribeToEmails"`
	// User attributes as key-value pairs. Keys must match existing user attributes set up in the Trophy dashboard.
	Attributes map[string]string `json:"attributes,omitempty" url:"attributes,omitempty"`
	// The ID of the user in your database. Must be a string.
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertedUser) GetEmail() string {
	if u == nil {
		return ""
	}
	return u.Email
}

func (u *UpsertedUser) GetName() string {
	if u == nil {
		return ""
	}
	return u.Name
}

func (u *UpsertedUser) GetTz() *string {
	if u == nil {
		return nil
	}
	return u.Tz
}

func (u *UpsertedUser) GetDeviceTokens() []string {
	if u == nil {
		return nil
	}
	return u.DeviceTokens
}

func (u *UpsertedUser) GetSubscribeToEmails() bool {
	if u == nil {
		return false
	}
	return u.SubscribeToEmails
}

func (u *UpsertedUser) GetAttributes() map[string]string {
	if u == nil {
		return nil
	}
	return u.Attributes
}

func (u *UpsertedUser) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UpsertedUser) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertedUser) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertedUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertedUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertedUser) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// A user's data for a specific leaderboard including rank, value, and history.
type WebhookUserLeaderboardResponse struct {
	// The unique ID of the leaderboard.
	Id string `json:"id" url:"id"`
	// The user-facing name of the leaderboard.
	Name string `json:"name" url:"name"`
	// The unique key used to reference the leaderboard in APIs.
	Key string `json:"key" url:"key"`
	// What the leaderboard ranks by.
	RankBy LeaderboardResponseRankBy `json:"rankBy" url:"rankBy"`
	// The key of the attribute to break down this leaderboard by.
	BreakdownAttribute *string `json:"breakdownAttribute,omitempty" url:"breakdownAttribute,omitempty"`
	// The key of the metric to rank by, if rankBy is 'metric'.
	MetricKey *string `json:"metricKey,omitempty" url:"metricKey,omitempty"`
	// The name of the metric to rank by, if rankBy is 'metric'.
	MetricName *string `json:"metricName,omitempty" url:"metricName,omitempty"`
	// The key of the points system to rank by, if rankBy is 'points'.
	PointsSystemKey *string `json:"pointsSystemKey,omitempty" url:"pointsSystemKey,omitempty"`
	// The name of the points system to rank by, if rankBy is 'points'.
	PointsSystemName *string `json:"pointsSystemName,omitempty" url:"pointsSystemName,omitempty"`
	// The user-facing description of the leaderboard.
	Description string `json:"description" url:"description"`
	// The start date of the leaderboard in YYYY-MM-DD format.
	Start string `json:"start" url:"start"`
	// The end date of the leaderboard in YYYY-MM-DD format, or null if it runs forever.
	End *string `json:"end,omitempty" url:"end,omitempty"`
	// The maximum number of participants in the leaderboard.
	MaxParticipants int `json:"maxParticipants" url:"maxParticipants"`
	// The repetition type for recurring leaderboards, or null for one-time leaderboards.
	RunUnit *LeaderboardResponseRunUnit `json:"runUnit,omitempty" url:"runUnit,omitempty"`
	// The interval between repetitions, relative to the start date and repetition type.
	RunInterval int `json:"runInterval" url:"runInterval"`
	// The user's current rank in this leaderboard. Null if the user is not on the leaderboard.
	Rank *int `json:"rank,omitempty" url:"rank,omitempty"`
	// The user's current value in this leaderboard. Null if the user is not on the leaderboard.
	Value *int `json:"value,omitempty" url:"value,omitempty"`
	// The user's rank before this event, or null if they were not on the leaderboard.
	PreviousRank *int `json:"previousRank,omitempty" url:"previousRank,omitempty"`
	// The user's value before this event, or null if they were not on the leaderboard.
	PreviousValue *int `json:"previousValue,omitempty" url:"previousValue,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookUserLeaderboardResponse) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *WebhookUserLeaderboardResponse) GetName() string {
	if w == nil {
		return ""
	}
	return w.Name
}

func (w *WebhookUserLeaderboardResponse) GetKey() string {
	if w == nil {
		return ""
	}
	return w.Key
}

func (w *WebhookUserLeaderboardResponse) GetRankBy() LeaderboardResponseRankBy {
	if w == nil {
		return ""
	}
	return w.RankBy
}

func (w *WebhookUserLeaderboardResponse) GetBreakdownAttribute() *string {
	if w == nil {
		return nil
	}
	return w.BreakdownAttribute
}

func (w *WebhookUserLeaderboardResponse) GetMetricKey() *string {
	if w == nil {
		return nil
	}
	return w.MetricKey
}

func (w *WebhookUserLeaderboardResponse) GetMetricName() *string {
	if w == nil {
		return nil
	}
	return w.MetricName
}

func (w *WebhookUserLeaderboardResponse) GetPointsSystemKey() *string {
	if w == nil {
		return nil
	}
	return w.PointsSystemKey
}

func (w *WebhookUserLeaderboardResponse) GetPointsSystemName() *string {
	if w == nil {
		return nil
	}
	return w.PointsSystemName
}

func (w *WebhookUserLeaderboardResponse) GetDescription() string {
	if w == nil {
		return ""
	}
	return w.Description
}

func (w *WebhookUserLeaderboardResponse) GetStart() string {
	if w == nil {
		return ""
	}
	return w.Start
}

func (w *WebhookUserLeaderboardResponse) GetEnd() *string {
	if w == nil {
		return nil
	}
	return w.End
}

func (w *WebhookUserLeaderboardResponse) GetMaxParticipants() int {
	if w == nil {
		return 0
	}
	return w.MaxParticipants
}

func (w *WebhookUserLeaderboardResponse) GetRunUnit() *LeaderboardResponseRunUnit {
	if w == nil {
		return nil
	}
	return w.RunUnit
}

func (w *WebhookUserLeaderboardResponse) GetRunInterval() int {
	if w == nil {
		return 0
	}
	return w.RunInterval
}

func (w *WebhookUserLeaderboardResponse) GetRank() *int {
	if w == nil {
		return nil
	}
	return w.Rank
}

func (w *WebhookUserLeaderboardResponse) GetValue() *int {
	if w == nil {
		return nil
	}
	return w.Value
}

func (w *WebhookUserLeaderboardResponse) GetPreviousRank() *int {
	if w == nil {
		return nil
	}
	return w.PreviousRank
}

func (w *WebhookUserLeaderboardResponse) GetPreviousValue() *int {
	if w == nil {
		return nil
	}
	return w.PreviousValue
}

func (w *WebhookUserLeaderboardResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookUserLeaderboardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookUserLeaderboardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookUserLeaderboardResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookUserLeaderboardResponse) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksAchievementCompletedPayload struct {
	// The webhook event type.
	// The user who completed the achievement.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The achievement completion that occurred.
	Achievement *CompletedAchievementResponse `json:"achievement,omitempty" url:"achievement,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksAchievementCompletedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksAchievementCompletedPayload) GetAchievement() *CompletedAchievementResponse {
	if w == nil {
		return nil
	}
	return w.Achievement
}

func (w *WebhooksAchievementCompletedPayload) Type() string {
	return w.type_
}

func (w *WebhooksAchievementCompletedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksAchievementCompletedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksAchievementCompletedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksAchievementCompletedPayload(unmarshaler.embed)
	if unmarshaler.Type != "achievement.completed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "achievement.completed", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksAchievementCompletedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksAchievementCompletedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "achievement.completed",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksAchievementCompletedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksLeaderboardChangedPayload struct {
	// The webhook event type.
	// The leaderboard run that changed.
	Leaderboard *LeaderboardResponseWithRankings `json:"leaderboard,omitempty" url:"leaderboard,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksLeaderboardChangedPayload) GetLeaderboard() *LeaderboardResponseWithRankings {
	if w == nil {
		return nil
	}
	return w.Leaderboard
}

func (w *WebhooksLeaderboardChangedPayload) Type() string {
	return w.type_
}

func (w *WebhooksLeaderboardChangedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksLeaderboardChangedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksLeaderboardChangedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksLeaderboardChangedPayload(unmarshaler.embed)
	if unmarshaler.Type != "leaderboard.changed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "leaderboard.changed", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksLeaderboardChangedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksLeaderboardChangedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "leaderboard.changed",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksLeaderboardChangedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksLeaderboardFinishedPayload struct {
	// The webhook event type.
	// The leaderboard run that finished and its final rankings.
	Leaderboard *LeaderboardResponseWithRankings `json:"leaderboard,omitempty" url:"leaderboard,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksLeaderboardFinishedPayload) GetLeaderboard() *LeaderboardResponseWithRankings {
	if w == nil {
		return nil
	}
	return w.Leaderboard
}

func (w *WebhooksLeaderboardFinishedPayload) Type() string {
	return w.type_
}

func (w *WebhooksLeaderboardFinishedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksLeaderboardFinishedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksLeaderboardFinishedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksLeaderboardFinishedPayload(unmarshaler.embed)
	if unmarshaler.Type != "leaderboard.finished" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "leaderboard.finished", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksLeaderboardFinishedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksLeaderboardFinishedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "leaderboard.finished",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksLeaderboardFinishedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksLeaderboardRankChangedPayload struct {
	// The webhook event type.
	// The user whose rank changed.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The user's leaderboard data that changed.
	Leaderboard *WebhookUserLeaderboardResponse `json:"leaderboard,omitempty" url:"leaderboard,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksLeaderboardRankChangedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksLeaderboardRankChangedPayload) GetLeaderboard() *WebhookUserLeaderboardResponse {
	if w == nil {
		return nil
	}
	return w.Leaderboard
}

func (w *WebhooksLeaderboardRankChangedPayload) Type() string {
	return w.type_
}

func (w *WebhooksLeaderboardRankChangedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksLeaderboardRankChangedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksLeaderboardRankChangedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksLeaderboardRankChangedPayload(unmarshaler.embed)
	if unmarshaler.Type != "leaderboard.rank_changed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "leaderboard.rank_changed", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksLeaderboardRankChangedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksLeaderboardRankChangedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "leaderboard.rank_changed",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksLeaderboardRankChangedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksLeaderboardStartedPayload struct {
	// The webhook event type.
	// The leaderboard run that started and its initial rankings.
	Leaderboard *LeaderboardResponseWithRankings `json:"leaderboard,omitempty" url:"leaderboard,omitempty"`
	type_       string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksLeaderboardStartedPayload) GetLeaderboard() *LeaderboardResponseWithRankings {
	if w == nil {
		return nil
	}
	return w.Leaderboard
}

func (w *WebhooksLeaderboardStartedPayload) Type() string {
	return w.type_
}

func (w *WebhooksLeaderboardStartedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksLeaderboardStartedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksLeaderboardStartedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksLeaderboardStartedPayload(unmarshaler.embed)
	if unmarshaler.Type != "leaderboard.started" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "leaderboard.started", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksLeaderboardStartedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksLeaderboardStartedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "leaderboard.started",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksLeaderboardStartedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksPointsChangedPayload struct {
	// The webhook event type.
	// The user whose points increased or decreased.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The user's points after the event.
	Points *GetUserPointsResponse `json:"points,omitempty" url:"points,omitempty"`
	type_  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksPointsChangedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksPointsChangedPayload) GetPoints() *GetUserPointsResponse {
	if w == nil {
		return nil
	}
	return w.Points
}

func (w *WebhooksPointsChangedPayload) Type() string {
	return w.type_
}

func (w *WebhooksPointsChangedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksPointsChangedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksPointsChangedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksPointsChangedPayload(unmarshaler.embed)
	if unmarshaler.Type != "points.changed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "points.changed", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksPointsChangedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksPointsChangedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "points.changed",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksPointsChangedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksStreakExtendedPayload struct {
	// The webhook event type.
	// The user who extended the streak.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The streak that was extended.
	Streak *BaseStreakResponse `json:"streak,omitempty" url:"streak,omitempty"`
	type_  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksStreakExtendedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksStreakExtendedPayload) GetStreak() *BaseStreakResponse {
	if w == nil {
		return nil
	}
	return w.Streak
}

func (w *WebhooksStreakExtendedPayload) Type() string {
	return w.type_
}

func (w *WebhooksStreakExtendedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksStreakExtendedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksStreakExtendedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksStreakExtendedPayload(unmarshaler.embed)
	if unmarshaler.Type != "streak.extended" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "streak.extended", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksStreakExtendedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksStreakExtendedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "streak.extended",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksStreakExtendedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksStreakFreezeConsumedPayload struct {
	// The webhook event type.
	// The user whose streak freeze was consumed.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The number of freezes consumed.
	Consumed int `json:"consumed" url:"consumed"`
	// The total number of freezes the user has left after the consumption.
	Freezes int `json:"freezes" url:"freezes"`
	type_   string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksStreakFreezeConsumedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksStreakFreezeConsumedPayload) GetConsumed() int {
	if w == nil {
		return 0
	}
	return w.Consumed
}

func (w *WebhooksStreakFreezeConsumedPayload) GetFreezes() int {
	if w == nil {
		return 0
	}
	return w.Freezes
}

func (w *WebhooksStreakFreezeConsumedPayload) Type() string {
	return w.type_
}

func (w *WebhooksStreakFreezeConsumedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksStreakFreezeConsumedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksStreakFreezeConsumedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksStreakFreezeConsumedPayload(unmarshaler.embed)
	if unmarshaler.Type != "streak.freeze_consumed" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "streak.freeze_consumed", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksStreakFreezeConsumedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksStreakFreezeConsumedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "streak.freeze_consumed",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksStreakFreezeConsumedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksStreakFreezeEarnedPayload struct {
	// The webhook event type.
	// The user who earned streak freezes.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The number of freezes earned.
	Earned int `json:"earned" url:"earned"`
	// The total number of freezes the user has after the event.
	Freezes int `json:"freezes" url:"freezes"`
	type_   string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksStreakFreezeEarnedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksStreakFreezeEarnedPayload) GetEarned() int {
	if w == nil {
		return 0
	}
	return w.Earned
}

func (w *WebhooksStreakFreezeEarnedPayload) GetFreezes() int {
	if w == nil {
		return 0
	}
	return w.Freezes
}

func (w *WebhooksStreakFreezeEarnedPayload) Type() string {
	return w.type_
}

func (w *WebhooksStreakFreezeEarnedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksStreakFreezeEarnedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksStreakFreezeEarnedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksStreakFreezeEarnedPayload(unmarshaler.embed)
	if unmarshaler.Type != "streak.freeze_earned" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "streak.freeze_earned", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksStreakFreezeEarnedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksStreakFreezeEarnedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "streak.freeze_earned",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksStreakFreezeEarnedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksStreakLostPayload struct {
	// The webhook event type.
	// The user who lost the streak.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The length of the streak that was lost.
	Length int `json:"length" url:"length"`
	type_  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksStreakLostPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksStreakLostPayload) GetLength() int {
	if w == nil {
		return 0
	}
	return w.Length
}

func (w *WebhooksStreakLostPayload) Type() string {
	return w.type_
}

func (w *WebhooksStreakLostPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksStreakLostPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksStreakLostPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksStreakLostPayload(unmarshaler.embed)
	if unmarshaler.Type != "streak.lost" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "streak.lost", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksStreakLostPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksStreakLostPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "streak.lost",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksStreakLostPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksStreakStartedPayload struct {
	// The webhook event type.
	// The user who started the streak.
	User *User `json:"user,omitempty" url:"user,omitempty"`
	// The streak that was started.
	Streak *BaseStreakResponse `json:"streak,omitempty" url:"streak,omitempty"`
	type_  string

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhooksStreakStartedPayload) GetUser() *User {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WebhooksStreakStartedPayload) GetStreak() *BaseStreakResponse {
	if w == nil {
		return nil
	}
	return w.Streak
}

func (w *WebhooksStreakStartedPayload) Type() string {
	return w.type_
}

func (w *WebhooksStreakStartedPayload) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhooksStreakStartedPayload) UnmarshalJSON(data []byte) error {
	type embed WebhooksStreakStartedPayload
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhooksStreakStartedPayload(unmarshaler.embed)
	if unmarshaler.Type != "streak.started" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", w, "streak.started", unmarshaler.Type)
	}
	w.type_ = unmarshaler.Type
	extraProperties, err := internal.ExtractExtraProperties(data, *w, "type")
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksStreakStartedPayload) MarshalJSON() ([]byte, error) {
	type embed WebhooksStreakStartedPayload
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*w),
		Type:  "streak.started",
	}
	return json.Marshal(marshaler)
}

func (w *WebhooksStreakStartedPayload) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
