// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
)

type StreaksListRequest struct {
	// A list of up to 100 user IDs.
	UserIds []*string `json:"-" url:"userIds,omitempty"`
}

type StreaksRankingsRequest struct {
	// Number of users to return. Must be between 1 and 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Whether to rank users by active streaks or longest streaks ever achieved.
	Type *StreaksRankingsRequestType `json:"-" url:"type,omitempty"`
}

type BulkStreakResponse = []*BulkStreakResponseItem

type BulkStreakResponseItem struct {
	// The ID of the user.
	UserId string `json:"userId" url:"userId"`
	// The length of the user's streak.
	StreakLength int `json:"streakLength" url:"streakLength"`
	// The timestamp the streak was extended, as a string.
	Extended string `json:"extended" url:"extended"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BulkStreakResponseItem) GetUserId() string {
	if b == nil {
		return ""
	}
	return b.UserId
}

func (b *BulkStreakResponseItem) GetStreakLength() int {
	if b == nil {
		return 0
	}
	return b.StreakLength
}

func (b *BulkStreakResponseItem) GetExtended() string {
	if b == nil {
		return ""
	}
	return b.Extended
}

func (b *BulkStreakResponseItem) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BulkStreakResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkStreakResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkStreakResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkStreakResponseItem) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// A user with their streak length in the rankings.
type StreakRankingUser struct {
	// The ID of the user.
	UserId string `json:"userId" url:"userId"`
	// The name of the user. May be null if no name is set.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The user's streak length (active or longest depending on query parameter).
	StreakLength int `json:"streakLength" url:"streakLength"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StreakRankingUser) GetUserId() string {
	if s == nil {
		return ""
	}
	return s.UserId
}

func (s *StreakRankingUser) GetName() *string {
	if s == nil {
		return nil
	}
	return s.Name
}

func (s *StreakRankingUser) GetStreakLength() int {
	if s == nil {
		return 0
	}
	return s.StreakLength
}

func (s *StreakRankingUser) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StreakRankingUser) UnmarshalJSON(data []byte) error {
	type unmarshaler StreakRankingUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreakRankingUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreakRankingUser) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StreaksRankingsRequestType string

const (
	StreaksRankingsRequestTypeActive  StreaksRankingsRequestType = "active"
	StreaksRankingsRequestTypeLongest StreaksRankingsRequestType = "longest"
)

func NewStreaksRankingsRequestTypeFromString(s string) (StreaksRankingsRequestType, error) {
	switch s {
	case "active":
		return StreaksRankingsRequestTypeActive, nil
	case "longest":
		return StreaksRankingsRequestTypeLongest, nil
	}
	var t StreaksRankingsRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StreaksRankingsRequestType) Ptr() *StreaksRankingsRequestType {
	return &s
}
