// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/trophyso/trophy-go/internal"
	time "time"
)

type AchievementsCompleteRequest struct {
	// The user that completed the achievement.
	User *UpsertedUser `json:"user,omitempty" url:"-"`
}

type AchievementCompletionResponse struct {
	// The unique ID of the completion.
	CompletionId string                     `json:"completionId" url:"completionId"`
	Achievement  *OneOffAchievementResponse `json:"achievement,omitempty" url:"achievement,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AchievementCompletionResponse) GetCompletionId() string {
	if a == nil {
		return ""
	}
	return a.CompletionId
}

func (a *AchievementCompletionResponse) GetAchievement() *OneOffAchievementResponse {
	if a == nil {
		return nil
	}
	return a.Achievement
}

func (a *AchievementCompletionResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AchievementCompletionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AchievementCompletionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AchievementCompletionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AchievementCompletionResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type OneOffAchievementResponse struct {
	// The unique ID of the achievement.
	Id string `json:"id" url:"id"`
	// The name of this achievement.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The URL of the badge image for the achievement, if one has been uploaded.
	BadgeUrl *string `json:"badgeUrl,omitempty" url:"badgeUrl,omitempty"`
	// The key used to reference this achievement in the API.
	Key *string `json:"key,omitempty" url:"key,omitempty"`
	// The date and time the achievement was completed, in ISO 8601 format.
	AchievedAt *time.Time `json:"achievedAt,omitempty" url:"achievedAt,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OneOffAchievementResponse) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OneOffAchievementResponse) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *OneOffAchievementResponse) GetBadgeUrl() *string {
	if o == nil {
		return nil
	}
	return o.BadgeUrl
}

func (o *OneOffAchievementResponse) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *OneOffAchievementResponse) GetAchievedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.AchievedAt
}

func (o *OneOffAchievementResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OneOffAchievementResponse) UnmarshalJSON(data []byte) error {
	type embed OneOffAchievementResponse
	var unmarshaler = struct {
		embed
		AchievedAt *internal.DateTime `json:"achievedAt,omitempty"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OneOffAchievementResponse(unmarshaler.embed)
	o.AchievedAt = unmarshaler.AchievedAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OneOffAchievementResponse) MarshalJSON() ([]byte, error) {
	type embed OneOffAchievementResponse
	var marshaler = struct {
		embed
		AchievedAt *internal.DateTime `json:"achievedAt,omitempty"`
	}{
		embed:      embed(*o),
		AchievedAt: internal.NewOptionalDateTime(o.AchievedAt),
	}
	return json.Marshal(marshaler)
}

func (o *OneOffAchievementResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}
